/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventReportingStatus.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

EventReportingStatus::EventReportingStatus() {
  m_EventReportCounter       = 0;
  m_EventReportCounterIsSet  = false;
  m_EventReportDuration      = 0;
  m_EventReportDurationIsSet = false;
}

void EventReportingStatus::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool EventReportingStatus::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool EventReportingStatus::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "EventReportingStatus" : pathPrefix;

  if (eventReportCounterIsSet()) {
    const int32_t& value               = m_EventReportCounter;
    const std::string currentValuePath = _pathPrefix + ".eventReportCounter";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
    if (value > 8640000) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 8640000;";
    }
  }

  if (eventReportDurationIsSet()) {
    const int32_t& value               = m_EventReportDuration;
    const std::string currentValuePath = _pathPrefix + ".eventReportDuration";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
    if (value > 8640000) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 8640000;";
    }
  }

  return success;
}

bool EventReportingStatus::operator==(const EventReportingStatus& rhs) const {
  return

      ((!eventReportCounterIsSet() && !rhs.eventReportCounterIsSet()) ||
       (eventReportCounterIsSet() && rhs.eventReportCounterIsSet() &&
        getEventReportCounter() == rhs.getEventReportCounter())) &&

      ((!eventReportDurationIsSet() && !rhs.eventReportDurationIsSet()) ||
       (eventReportDurationIsSet() && rhs.eventReportDurationIsSet() &&
        getEventReportDuration() == rhs.getEventReportDuration()))

          ;
}

bool EventReportingStatus::operator!=(const EventReportingStatus& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const EventReportingStatus& o) {
  j = nlohmann::json();
  if (o.eventReportCounterIsSet())
    j["eventReportCounter"] = o.m_EventReportCounter;
  if (o.eventReportDurationIsSet())
    j["eventReportDuration"] = o.m_EventReportDuration;
}

void from_json(const nlohmann::json& j, EventReportingStatus& o) {
  if (j.find("eventReportCounter") != j.end()) {
    j.at("eventReportCounter").get_to(o.m_EventReportCounter);
    o.m_EventReportCounterIsSet = true;
  }
  if (j.find("eventReportDuration") != j.end()) {
    j.at("eventReportDuration").get_to(o.m_EventReportDuration);
    o.m_EventReportDurationIsSet = true;
  }
}

int32_t EventReportingStatus::getEventReportCounter() const {
  return m_EventReportCounter;
}
void EventReportingStatus::setEventReportCounter(int32_t const value) {
  m_EventReportCounter      = value;
  m_EventReportCounterIsSet = true;
}
bool EventReportingStatus::eventReportCounterIsSet() const {
  return m_EventReportCounterIsSet;
}
void EventReportingStatus::unsetEventReportCounter() {
  m_EventReportCounterIsSet = false;
}
int32_t EventReportingStatus::getEventReportDuration() const {
  return m_EventReportDuration;
}
void EventReportingStatus::setEventReportDuration(int32_t const value) {
  m_EventReportDuration      = value;
  m_EventReportDurationIsSet = true;
}
bool EventReportingStatus::eventReportDurationIsSet() const {
  return m_EventReportDurationIsSet;
}
void EventReportingStatus::unsetEventReportDuration() {
  m_EventReportDurationIsSet = false;
}

}  // namespace oai::model::lmf
