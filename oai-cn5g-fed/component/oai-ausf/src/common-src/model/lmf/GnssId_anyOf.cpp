/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GnssId_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace oai::model::lmf {

GnssId_anyOf::GnssId_anyOf() {}

void GnssId_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool GnssId_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool GnssId_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "GnssId_anyOf" : pathPrefix;

  if (m_value == GnssId_anyOf::eGnssId_anyOf::INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool GnssId_anyOf::operator==(const GnssId_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool GnssId_anyOf::operator!=(const GnssId_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GnssId_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case GnssId_anyOf::eGnssId_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case GnssId_anyOf::eGnssId_anyOf::GPS:
      j = "GPS";
      break;
    case GnssId_anyOf::eGnssId_anyOf::GALILEO:
      j = "GALILEO";
      break;
    case GnssId_anyOf::eGnssId_anyOf::SBAS:
      j = "SBAS";
      break;
    case GnssId_anyOf::eGnssId_anyOf::MODERNIZED_GPS:
      j = "MODERNIZED_GPS";
      break;
    case GnssId_anyOf::eGnssId_anyOf::QZSS:
      j = "QZSS";
      break;
    case GnssId_anyOf::eGnssId_anyOf::GLONASS:
      j = "GLONASS";
      break;
    case GnssId_anyOf::eGnssId_anyOf::BDS:
      j = "BDS";
      break;
    case GnssId_anyOf::eGnssId_anyOf::NAVIC:
      j = "NAVIC";
      break;
  }
}

void from_json(const nlohmann::json& j, GnssId_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "GPS") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::GPS);
  } else if (s == "GALILEO") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::GALILEO);
  } else if (s == "SBAS") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::SBAS);
  } else if (s == "MODERNIZED_GPS") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::MODERNIZED_GPS);
  } else if (s == "QZSS") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::QZSS);
  } else if (s == "GLONASS") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::GLONASS);
  } else if (s == "BDS") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::BDS);
  } else if (s == "NAVIC") {
    o.setValue(GnssId_anyOf::eGnssId_anyOf::NAVIC);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " GnssId_anyOf::eGnssId_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

GnssId_anyOf::eGnssId_anyOf GnssId_anyOf::getValue() const {
  return m_value;
}
void GnssId_anyOf::setValue(GnssId_anyOf::eGnssId_anyOf value) {
  m_value = value;
}

}  // namespace oai::model::lmf
