/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DetermineLocation_request.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

DetermineLocation_request::DetermineLocation_request() {
  m_JsonDataIsSet             = false;
  m_BinaryDataLppMessageIsSet = false;
}

void DetermineLocation_request::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool DetermineLocation_request::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool DetermineLocation_request::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "DetermineLocation_request" : pathPrefix;

  return success;
}

bool DetermineLocation_request::operator==(
    const DetermineLocation_request& rhs) const {
  return

      ((!jsonDataIsSet() && !rhs.jsonDataIsSet()) ||
       (jsonDataIsSet() && rhs.jsonDataIsSet() &&
        getJsonData() == rhs.getJsonData())) &&

      ((!binaryDataLppMessageIsSet() && !rhs.binaryDataLppMessageIsSet()) ||
       (binaryDataLppMessageIsSet() && rhs.binaryDataLppMessageIsSet() &&
        getBinaryDataLppMessage() == rhs.getBinaryDataLppMessage()))

          ;
}

bool DetermineLocation_request::operator!=(
    const DetermineLocation_request& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DetermineLocation_request& o) {
  j = nlohmann::json();
  if (o.jsonDataIsSet()) j["jsonData"] = o.m_JsonData;
  if (o.binaryDataLppMessageIsSet())
    j["binaryDataLppMessage"] = o.m_BinaryDataLppMessage;
}

void from_json(const nlohmann::json& j, DetermineLocation_request& o) {
  if (j.find("jsonData") != j.end()) {
    j.at("jsonData").get_to(o.m_JsonData);
    o.m_JsonDataIsSet = true;
  }
  if (j.find("binaryDataLppMessage") != j.end()) {
    j.at("binaryDataLppMessage").get_to(o.m_BinaryDataLppMessage);
    o.m_BinaryDataLppMessageIsSet = true;
  }
}

oai::model::lmf::InputData DetermineLocation_request::getJsonData() const {
  return m_JsonData;
}
void DetermineLocation_request::setJsonData(
    oai::model::lmf::InputData const& value) {
  m_JsonData      = value;
  m_JsonDataIsSet = true;
}
bool DetermineLocation_request::jsonDataIsSet() const {
  return m_JsonDataIsSet;
}
void DetermineLocation_request::unsetJsonData() {
  m_JsonDataIsSet = false;
}
std::string DetermineLocation_request::getBinaryDataLppMessage() const {
  return m_BinaryDataLppMessage;
}
void DetermineLocation_request::setBinaryDataLppMessage(
    std::string const& value) {
  m_BinaryDataLppMessage      = value;
  m_BinaryDataLppMessageIsSet = true;
}
bool DetermineLocation_request::binaryDataLppMessageIsSet() const {
  return m_BinaryDataLppMessageIsSet;
}
void DetermineLocation_request::unsetBinaryDataLppMessage() {
  m_BinaryDataLppMessageIsSet = false;
}

}  // namespace oai::model::lmf
