/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ReportingAreaType_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace oai::model::lmf {

ReportingAreaType_anyOf::ReportingAreaType_anyOf() {}

void ReportingAreaType_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool ReportingAreaType_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool ReportingAreaType_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "ReportingAreaType_anyOf" : pathPrefix;

  if (m_value == ReportingAreaType_anyOf::eReportingAreaType_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool ReportingAreaType_anyOf::operator==(
    const ReportingAreaType_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool ReportingAreaType_anyOf::operator!=(
    const ReportingAreaType_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReportingAreaType_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case ReportingAreaType_anyOf::eReportingAreaType_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case ReportingAreaType_anyOf::eReportingAreaType_anyOf::
        EPS_TRACKING_AREA_IDENTITY:
      j = "EPS_TRACKING_AREA_IDENTITY";
      break;
    case ReportingAreaType_anyOf::eReportingAreaType_anyOf::
        E_UTRAN_CELL_GLOBAL_IDENTIFICATION:
      j = "E-UTRAN_CELL_GLOBAL_IDENTIFICATION";
      break;
    case ReportingAreaType_anyOf::eReportingAreaType_anyOf::
        _5GS_TRACKING_AREA_IDENTITY:
      j = "5GS_TRACKING_AREA_IDENTITY";
      break;
    case ReportingAreaType_anyOf::eReportingAreaType_anyOf::
        NR_CELL_GLOBAL_IDENTITY:
      j = "NR_CELL_GLOBAL_IDENTITY";
      break;
  }
}

void from_json(const nlohmann::json& j, ReportingAreaType_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "EPS_TRACKING_AREA_IDENTITY") {
    o.setValue(ReportingAreaType_anyOf::eReportingAreaType_anyOf::
                   EPS_TRACKING_AREA_IDENTITY);
  } else if (s == "E-UTRAN_CELL_GLOBAL_IDENTIFICATION") {
    o.setValue(ReportingAreaType_anyOf::eReportingAreaType_anyOf::
                   E_UTRAN_CELL_GLOBAL_IDENTIFICATION);
  } else if (s == "5GS_TRACKING_AREA_IDENTITY") {
    o.setValue(ReportingAreaType_anyOf::eReportingAreaType_anyOf::
                   _5GS_TRACKING_AREA_IDENTITY);
  } else if (s == "NR_CELL_GLOBAL_IDENTITY") {
    o.setValue(ReportingAreaType_anyOf::eReportingAreaType_anyOf::
                   NR_CELL_GLOBAL_IDENTITY);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " ReportingAreaType_anyOf::eReportingAreaType_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

ReportingAreaType_anyOf::eReportingAreaType_anyOf
ReportingAreaType_anyOf::getValue() const {
  return m_value;
}
void ReportingAreaType_anyOf::setValue(
    ReportingAreaType_anyOf::eReportingAreaType_anyOf value) {
  m_value = value;
}

}  // namespace oai::model::lmf
