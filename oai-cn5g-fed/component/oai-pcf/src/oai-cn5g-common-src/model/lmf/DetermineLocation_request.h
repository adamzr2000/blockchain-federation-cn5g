/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DetermineLocation_request.h
 *
 *
 */

#ifndef DetermineLocation_request_H_
#define DetermineLocation_request_H_

#include <string>
#include "InputData.h"
#include <nlohmann/json.hpp>

namespace oai::model::lmf {

/// <summary>
///
/// </summary>
class DetermineLocation_request {
 public:
  DetermineLocation_request();
  virtual ~DetermineLocation_request() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const DetermineLocation_request& rhs) const;
  bool operator!=(const DetermineLocation_request& rhs) const;

  /////////////////////////////////////////////
  /// DetermineLocation_request members

  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::InputData getJsonData() const;
  void setJsonData(oai::model::lmf::InputData const& value);
  bool jsonDataIsSet() const;
  void unsetJsonData();
  /// <summary>
  ///
  /// </summary>
  std::string getBinaryDataLppMessage() const;
  void setBinaryDataLppMessage(std::string const& value);
  bool binaryDataLppMessageIsSet() const;
  void unsetBinaryDataLppMessage();

  friend void to_json(nlohmann::json& j, const DetermineLocation_request& o);
  friend void from_json(const nlohmann::json& j, DetermineLocation_request& o);

 protected:
  oai::model::lmf::InputData m_JsonData;
  bool m_JsonDataIsSet;
  std::string m_BinaryDataLppMessage;
  bool m_BinaryDataLppMessageIsSet;
};

}  // namespace oai::model::lmf

#endif /* DetermineLocation_request_H_ */
