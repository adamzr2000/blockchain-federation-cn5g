/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Usage_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace oai::model::lmf {

Usage_anyOf::Usage_anyOf() {}

void Usage_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool Usage_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool Usage_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "Usage_anyOf" : pathPrefix;

  if (m_value == Usage_anyOf::eUsage_anyOf::INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool Usage_anyOf::operator==(const Usage_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool Usage_anyOf::operator!=(const Usage_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Usage_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case Usage_anyOf::eUsage_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case Usage_anyOf::eUsage_anyOf::UNSUCCESS:
      j = "UNSUCCESS";
      break;
    case Usage_anyOf::eUsage_anyOf::SUCCESS_RESULTS_NOT_USED:
      j = "SUCCESS_RESULTS_NOT_USED";
      break;
    case Usage_anyOf::eUsage_anyOf::SUCCESS_RESULTS_USED_TO_VERIFY_LOCATION:
      j = "SUCCESS_RESULTS_USED_TO_VERIFY_LOCATION";
      break;
    case Usage_anyOf::eUsage_anyOf::SUCCESS_RESULTS_USED_TO_GENERATE_LOCATION:
      j = "SUCCESS_RESULTS_USED_TO_GENERATE_LOCATION";
      break;
    case Usage_anyOf::eUsage_anyOf::SUCCESS_METHOD_NOT_DETERMINED:
      j = "SUCCESS_METHOD_NOT_DETERMINED";
      break;
  }
}

void from_json(const nlohmann::json& j, Usage_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "UNSUCCESS") {
    o.setValue(Usage_anyOf::eUsage_anyOf::UNSUCCESS);
  } else if (s == "SUCCESS_RESULTS_NOT_USED") {
    o.setValue(Usage_anyOf::eUsage_anyOf::SUCCESS_RESULTS_NOT_USED);
  } else if (s == "SUCCESS_RESULTS_USED_TO_VERIFY_LOCATION") {
    o.setValue(
        Usage_anyOf::eUsage_anyOf::SUCCESS_RESULTS_USED_TO_VERIFY_LOCATION);
  } else if (s == "SUCCESS_RESULTS_USED_TO_GENERATE_LOCATION") {
    o.setValue(
        Usage_anyOf::eUsage_anyOf::SUCCESS_RESULTS_USED_TO_GENERATE_LOCATION);
  } else if (s == "SUCCESS_METHOD_NOT_DETERMINED") {
    o.setValue(Usage_anyOf::eUsage_anyOf::SUCCESS_METHOD_NOT_DETERMINED);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " Usage_anyOf::eUsage_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

Usage_anyOf::eUsage_anyOf Usage_anyOf::getValue() const {
  return m_value;
}
void Usage_anyOf::setValue(Usage_anyOf::eUsage_anyOf value) {
  m_value = value;
}

}  // namespace oai::model::lmf
