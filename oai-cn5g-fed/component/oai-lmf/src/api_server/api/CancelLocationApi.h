/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CancelLocationApi.h
 *
 *
 */

#ifndef CancelLocationApi_H_
#define CancelLocationApi_H_

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "lmf.h"

#include "CancelLocData.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include <string>

namespace oai::lmf::api {

class CancelLocationApi {
 public:
  explicit CancelLocationApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~CancelLocationApi() = default;
  void init();

 private:
  void setupRoutes();

  void cancel_location_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void cancel_location_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overridden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overridden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// request cancellation of periodic or triggered location
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="cancelLocData"></param>
  virtual void cancel_location(
      const oai::model::lmf::CancelLocData& cancelLocData,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace oai::lmf::api

#endif /* CancelLocationApi_H_ */
