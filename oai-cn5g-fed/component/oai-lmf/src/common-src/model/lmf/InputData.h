/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * InputData.h
 *
 *
 */

#ifndef InputData_H_
#define InputData_H_

#include "LcsPriority.h"
#include "AreaEventInfo.h"
#include "Ncgi.h"
#include "UeConnectivityState.h"
#include "RefToBinaryData.h"
#include <string>
#include "ExternalClientType.h"
#include "PeriodicEventInfo.h"
#include "ReportingAccessType.h"
#include "UeLocationServiceInd.h"
#include <vector>
#include "Ecgi.h"
#include "LdrType.h"
#include "UeLcsCapability.h"
#include "LocationQoS.h"
#include "VelocityRequested.h"
#include "MotionEventInfo.h"
#include "SupportedGADShapes.h"
#include <nlohmann/json.hpp>

namespace oai::model::lmf {

/// <summary>
///
/// </summary>
class InputData {
 public:
  InputData();
  virtual ~InputData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const InputData& rhs) const;
  bool operator!=(const InputData& rhs) const;

  /////////////////////////////////////////////
  /// InputData members

  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::ExternalClientType getExternalClientType() const;
  void setExternalClientType(oai::model::lmf::ExternalClientType const& value);
  bool externalClientTypeIsSet() const;
  void unsetExternalClientType();
  /// <summary>
  ///
  /// </summary>
  std::string getCorrelationID() const;
  void setCorrelationID(std::string const& value);
  bool correlationIDIsSet() const;
  void unsetCorrelationID();
  /// <summary>
  ///
  /// </summary>
  std::string getAmfId() const;
  void setAmfId(std::string const& value);
  bool amfIdIsSet() const;
  void unsetAmfId();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::LocationQoS getLocationQoS() const;
  void setLocationQoS(oai::model::lmf::LocationQoS const& value);
  bool locationQoSIsSet() const;
  void unsetLocationQoS();
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::lmf::SupportedGADShapes> getSupportedGADShapes()
      const;
  void setSupportedGADShapes(
      std::vector<oai::model::lmf::SupportedGADShapes> const& value);
  bool supportedGADShapesIsSet() const;
  void unsetSupportedGADShapes();
  /// <summary>
  ///
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const& value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  ///
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const& value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const& value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ecgi getEcgi() const;
  void setEcgi(oai::model::common::Ecgi const& value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ecgi getEcgiOnSecondNode() const;
  void setEcgiOnSecondNode(oai::model::common::Ecgi const& value);
  bool ecgiOnSecondNodeIsSet() const;
  void unsetEcgiOnSecondNode();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ncgi getNcgi() const;
  void setNcgi(oai::model::common::Ncgi const& value);
  bool ncgiIsSet() const;
  void unsetNcgi();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ncgi getNcgiOnSecondNode() const;
  void setNcgiOnSecondNode(oai::model::common::Ncgi const& value);
  bool ncgiOnSecondNodeIsSet() const;
  void unsetNcgiOnSecondNode();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::LcsPriority getPriority() const;
  void setPriority(oai::model::lmf::LcsPriority const& value);
  bool priorityIsSet() const;
  void unsetPriority();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::VelocityRequested getVelocityRequested() const;
  void setVelocityRequested(oai::model::lmf::VelocityRequested const& value);
  bool velocityRequestedIsSet() const;
  void unsetVelocityRequested();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::UeLcsCapability getUeLcsCap() const;
  void setUeLcsCap(oai::model::lmf::UeLcsCapability const& value);
  bool ueLcsCapIsSet() const;
  void unsetUeLcsCap();
  /// <summary>
  ///
  /// </summary>
  int32_t getLcsServiceType() const;
  void setLcsServiceType(int32_t const value);
  bool lcsServiceTypeIsSet() const;
  void unsetLcsServiceType();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::LdrType getLdrType() const;
  void setLdrType(oai::model::lmf::LdrType const& value);
  bool ldrTypeIsSet() const;
  void unsetLdrType();
  /// <summary>
  ///
  /// </summary>
  std::string getHgmlcCallBackURI() const;
  void setHgmlcCallBackURI(std::string const& value);
  bool hgmlcCallBackURIIsSet() const;
  void unsetHgmlcCallBackURI();
  /// <summary>
  ///
  /// </summary>
  std::string getVgmlcAddress() const;
  void setVgmlcAddress(std::string const& value);
  bool vgmlcAddressIsSet() const;
  void unsetVgmlcAddress();
  /// <summary>
  ///
  /// </summary>
  std::string getLdrReference() const;
  void setLdrReference(std::string const& value);
  bool ldrReferenceIsSet() const;
  void unsetLdrReference();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::PeriodicEventInfo getPeriodicEventInfo() const;
  void setPeriodicEventInfo(oai::model::lmf::PeriodicEventInfo const& value);
  bool periodicEventInfoIsSet() const;
  void unsetPeriodicEventInfo();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::AreaEventInfo getAreaEventInfo() const;
  void setAreaEventInfo(oai::model::lmf::AreaEventInfo const& value);
  bool areaEventInfoIsSet() const;
  void unsetAreaEventInfo();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::MotionEventInfo getMotionEventInfo() const;
  void setMotionEventInfo(oai::model::lmf::MotionEventInfo const& value);
  bool motionEventInfoIsSet() const;
  void unsetMotionEventInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::lmf::ReportingAccessType> getReportingAccessTypes()
      const;
  void setReportingAccessTypes(
      std::vector<oai::model::lmf::ReportingAccessType> const& value);
  bool reportingAccessTypesIsSet() const;
  void unsetReportingAccessTypes();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::UeConnectivityState getUeConnectivityStates() const;
  void setUeConnectivityStates(
      oai::model::lmf::UeConnectivityState const& value);
  bool ueConnectivityStatesIsSet() const;
  void unsetUeConnectivityStates();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::UeLocationServiceInd getUeLocationServiceInd() const;
  void setUeLocationServiceInd(
      oai::model::lmf::UeLocationServiceInd const& value);
  bool ueLocationServiceIndIsSet() const;
  void unsetUeLocationServiceInd();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::RefToBinaryData getLppMessage() const;
  void setLppMessage(oai::model::common::RefToBinaryData const& value);
  bool lppMessageIsSet() const;
  void unsetLppMessage();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json& j, const InputData& o);
  friend void from_json(const nlohmann::json& j, InputData& o);

 protected:
  oai::model::lmf::ExternalClientType m_ExternalClientType;
  bool m_ExternalClientTypeIsSet;
  std::string m_CorrelationID;
  bool m_CorrelationIDIsSet;
  std::string m_AmfId;
  bool m_AmfIdIsSet;
  oai::model::lmf::LocationQoS m_LocationQoS;
  bool m_LocationQoSIsSet;
  std::vector<oai::model::lmf::SupportedGADShapes> m_SupportedGADShapes;
  bool m_SupportedGADShapesIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  oai::model::common::Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  oai::model::common::Ecgi m_EcgiOnSecondNode;
  bool m_EcgiOnSecondNodeIsSet;
  oai::model::common::Ncgi m_Ncgi;
  bool m_NcgiIsSet;
  oai::model::common::Ncgi m_NcgiOnSecondNode;
  bool m_NcgiOnSecondNodeIsSet;
  oai::model::lmf::LcsPriority m_Priority;
  bool m_PriorityIsSet;
  oai::model::lmf::VelocityRequested m_VelocityRequested;
  bool m_VelocityRequestedIsSet;
  oai::model::lmf::UeLcsCapability m_UeLcsCap;
  bool m_UeLcsCapIsSet;
  int32_t m_LcsServiceType;
  bool m_LcsServiceTypeIsSet;
  oai::model::lmf::LdrType m_LdrType;
  bool m_LdrTypeIsSet;
  std::string m_HgmlcCallBackURI;
  bool m_HgmlcCallBackURIIsSet;
  std::string m_VgmlcAddress;
  bool m_VgmlcAddressIsSet;
  std::string m_LdrReference;
  bool m_LdrReferenceIsSet;
  oai::model::lmf::PeriodicEventInfo m_PeriodicEventInfo;
  bool m_PeriodicEventInfoIsSet;
  oai::model::lmf::AreaEventInfo m_AreaEventInfo;
  bool m_AreaEventInfoIsSet;
  oai::model::lmf::MotionEventInfo m_MotionEventInfo;
  bool m_MotionEventInfoIsSet;
  std::vector<oai::model::lmf::ReportingAccessType> m_ReportingAccessTypes;
  bool m_ReportingAccessTypesIsSet;
  oai::model::lmf::UeConnectivityState m_UeConnectivityStates;
  bool m_UeConnectivityStatesIsSet;
  oai::model::lmf::UeLocationServiceInd m_UeLocationServiceInd;
  bool m_UeLocationServiceIndIsSet;
  oai::model::common::RefToBinaryData m_LppMessage;
  bool m_LppMessageIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

}  // namespace oai::model::lmf

#endif /* InputData_H_ */
