/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UELocationInfo.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

UELocationInfo::UELocationInfo() {
  m_LocationEstimateIsSet      = false;
  m_AgeOfLocationEstimate      = 0;
  m_AgeOfLocationEstimateIsSet = false;
  m_VelocityEstimateIsSet      = false;
  m_AgeOfVelocityEstimate      = 0;
  m_AgeOfVelocityEstimateIsSet = false;
}

void UELocationInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool UELocationInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UELocationInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UELocationInfo" : pathPrefix;

  if (ageOfLocationEstimateIsSet()) {
    const int32_t& value               = m_AgeOfLocationEstimate;
    const std::string currentValuePath = _pathPrefix + ".ageOfLocationEstimate";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 32767) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 32767;";
    }
  }

  if (ageOfVelocityEstimateIsSet()) {
    const int32_t& value               = m_AgeOfVelocityEstimate;
    const std::string currentValuePath = _pathPrefix + ".ageOfVelocityEstimate";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 32767) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 32767;";
    }
  }

  return success;
}

bool UELocationInfo::operator==(const UELocationInfo& rhs) const {
  return

      ((!locationEstimateIsSet() && !rhs.locationEstimateIsSet()) ||
       (locationEstimateIsSet() && rhs.locationEstimateIsSet() &&
        getLocationEstimate() == rhs.getLocationEstimate())) &&

      ((!ageOfLocationEstimateIsSet() && !rhs.ageOfLocationEstimateIsSet()) ||
       (ageOfLocationEstimateIsSet() && rhs.ageOfLocationEstimateIsSet() &&
        getAgeOfLocationEstimate() == rhs.getAgeOfLocationEstimate())) &&

      ((!velocityEstimateIsSet() && !rhs.velocityEstimateIsSet()) ||
       (velocityEstimateIsSet() && rhs.velocityEstimateIsSet() &&
        getVelocityEstimate() == rhs.getVelocityEstimate())) &&

      ((!ageOfVelocityEstimateIsSet() && !rhs.ageOfVelocityEstimateIsSet()) ||
       (ageOfVelocityEstimateIsSet() && rhs.ageOfVelocityEstimateIsSet() &&
        getAgeOfVelocityEstimate() == rhs.getAgeOfVelocityEstimate()))

          ;
}

bool UELocationInfo::operator!=(const UELocationInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UELocationInfo& o) {
  j = nlohmann::json();
  if (o.locationEstimateIsSet()) j["locationEstimate"] = o.m_LocationEstimate;
  if (o.ageOfLocationEstimateIsSet())
    j["ageOfLocationEstimate"] = o.m_AgeOfLocationEstimate;
  if (o.velocityEstimateIsSet()) j["velocityEstimate"] = o.m_VelocityEstimate;
  if (o.ageOfVelocityEstimateIsSet())
    j["ageOfVelocityEstimate"] = o.m_AgeOfVelocityEstimate;
}

void from_json(const nlohmann::json& j, UELocationInfo& o) {
  if (j.find("locationEstimate") != j.end()) {
    j.at("locationEstimate").get_to(o.m_LocationEstimate);
    o.m_LocationEstimateIsSet = true;
  }
  if (j.find("ageOfLocationEstimate") != j.end()) {
    j.at("ageOfLocationEstimate").get_to(o.m_AgeOfLocationEstimate);
    o.m_AgeOfLocationEstimateIsSet = true;
  }
  if (j.find("velocityEstimate") != j.end()) {
    j.at("velocityEstimate").get_to(o.m_VelocityEstimate);
    o.m_VelocityEstimateIsSet = true;
  }
  if (j.find("ageOfVelocityEstimate") != j.end()) {
    j.at("ageOfVelocityEstimate").get_to(o.m_AgeOfVelocityEstimate);
    o.m_AgeOfVelocityEstimateIsSet = true;
  }
}

oai::model::lmf::GeographicArea UELocationInfo::getLocationEstimate() const {
  return m_LocationEstimate;
}
void UELocationInfo::setLocationEstimate(
    oai::model::lmf::GeographicArea const& value) {
  m_LocationEstimate      = value;
  m_LocationEstimateIsSet = true;
}
bool UELocationInfo::locationEstimateIsSet() const {
  return m_LocationEstimateIsSet;
}
void UELocationInfo::unsetLocationEstimate() {
  m_LocationEstimateIsSet = false;
}
int32_t UELocationInfo::getAgeOfLocationEstimate() const {
  return m_AgeOfLocationEstimate;
}
void UELocationInfo::setAgeOfLocationEstimate(int32_t const value) {
  m_AgeOfLocationEstimate      = value;
  m_AgeOfLocationEstimateIsSet = true;
}
bool UELocationInfo::ageOfLocationEstimateIsSet() const {
  return m_AgeOfLocationEstimateIsSet;
}
void UELocationInfo::unsetAgeOfLocationEstimate() {
  m_AgeOfLocationEstimateIsSet = false;
}
oai::model::lmf::VelocityEstimate UELocationInfo::getVelocityEstimate() const {
  return m_VelocityEstimate;
}
void UELocationInfo::setVelocityEstimate(
    oai::model::lmf::VelocityEstimate const& value) {
  m_VelocityEstimate      = value;
  m_VelocityEstimateIsSet = true;
}
bool UELocationInfo::velocityEstimateIsSet() const {
  return m_VelocityEstimateIsSet;
}
void UELocationInfo::unsetVelocityEstimate() {
  m_VelocityEstimateIsSet = false;
}
int32_t UELocationInfo::getAgeOfVelocityEstimate() const {
  return m_AgeOfVelocityEstimate;
}
void UELocationInfo::setAgeOfVelocityEstimate(int32_t const value) {
  m_AgeOfVelocityEstimate      = value;
  m_AgeOfVelocityEstimateIsSet = true;
}
bool UELocationInfo::ageOfVelocityEstimateIsSet() const {
  return m_AgeOfVelocityEstimateIsSet;
}
void UELocationInfo::unsetAgeOfVelocityEstimate() {
  m_AgeOfVelocityEstimateIsSet = false;
}

}  // namespace oai::model::lmf
