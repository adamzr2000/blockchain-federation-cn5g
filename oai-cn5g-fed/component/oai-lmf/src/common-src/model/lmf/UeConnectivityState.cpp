/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeConnectivityState.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

UeConnectivityState::UeConnectivityState() {
  m_ConnectivitystateIsSet = false;
}

void UeConnectivityState::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool UeConnectivityState::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeConnectivityState::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeConnectivityState" : pathPrefix;

  return success;
}

bool UeConnectivityState::operator==(const UeConnectivityState& rhs) const {
  return

      (getAccessType() == rhs.getAccessType()) &&

      ((!connectivitystateIsSet() && !rhs.connectivitystateIsSet()) ||
       (connectivitystateIsSet() && rhs.connectivitystateIsSet() &&
        getConnectivitystate() == rhs.getConnectivitystate()))

          ;
}

bool UeConnectivityState::operator!=(const UeConnectivityState& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeConnectivityState& o) {
  j               = nlohmann::json();
  j["accessType"] = o.m_AccessType;
  if (o.connectivitystateIsSet())
    j["connectivitystate"] = o.m_Connectivitystate;
}

void from_json(const nlohmann::json& j, UeConnectivityState& o) {
  j.at("accessType").get_to(o.m_AccessType);
  if (j.find("connectivitystate") != j.end()) {
    j.at("connectivitystate").get_to(o.m_Connectivitystate);
    o.m_ConnectivitystateIsSet = true;
  }
}

oai::model::common::AccessType UeConnectivityState::getAccessType() const {
  return m_AccessType;
}
void UeConnectivityState::setAccessType(
    oai::model::common::AccessType const& value) {
  m_AccessType = value;
}
oai::model::lmf::CmState UeConnectivityState::getConnectivitystate() const {
  return m_Connectivitystate;
}
void UeConnectivityState::setConnectivitystate(
    oai::model::lmf::CmState const& value) {
  m_Connectivitystate      = value;
  m_ConnectivitystateIsSet = true;
}
bool UeConnectivityState::connectivitystateIsSet() const {
  return m_ConnectivitystateIsSet;
}
void UeConnectivityState::unsetConnectivitystate() {
  m_ConnectivitystateIsSet = false;
}

}  // namespace oai::model::lmf
