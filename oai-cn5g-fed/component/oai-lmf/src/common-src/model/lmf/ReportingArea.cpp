/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ReportingArea.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

ReportingArea::ReportingArea() {
  m_TaiIsSet  = false;
  m_EcgiIsSet = false;
  m_NcgiIsSet = false;
}

void ReportingArea::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool ReportingArea::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool ReportingArea::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "ReportingArea" : pathPrefix;

  return success;
}

bool ReportingArea::operator==(const ReportingArea& rhs) const {
  return

      (getAreaType() == rhs.getAreaType()) &&

      ((!taiIsSet() && !rhs.taiIsSet()) ||
       (taiIsSet() && rhs.taiIsSet() && getTai() == rhs.getTai())) &&

      ((!ecgiIsSet() && !rhs.ecgiIsSet()) ||
       (ecgiIsSet() && rhs.ecgiIsSet() && getEcgi() == rhs.getEcgi())) &&

      ((!ncgiIsSet() && !rhs.ncgiIsSet()) ||
       (ncgiIsSet() && rhs.ncgiIsSet() && getNcgi() == rhs.getNcgi()))

          ;
}

bool ReportingArea::operator!=(const ReportingArea& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ReportingArea& o) {
  j             = nlohmann::json();
  j["areaType"] = o.m_AreaType;
  if (o.taiIsSet()) j["tai"] = o.m_Tai;
  if (o.ecgiIsSet()) j["ecgi"] = o.m_Ecgi;
  if (o.ncgiIsSet()) j["ncgi"] = o.m_Ncgi;
}

void from_json(const nlohmann::json& j, ReportingArea& o) {
  j.at("areaType").get_to(o.m_AreaType);
  if (j.find("tai") != j.end()) {
    j.at("tai").get_to(o.m_Tai);
    o.m_TaiIsSet = true;
  }
  if (j.find("ecgi") != j.end()) {
    j.at("ecgi").get_to(o.m_Ecgi);
    o.m_EcgiIsSet = true;
  }
  if (j.find("ncgi") != j.end()) {
    j.at("ncgi").get_to(o.m_Ncgi);
    o.m_NcgiIsSet = true;
  }
}

oai::model::lmf::ReportingAreaType ReportingArea::getAreaType() const {
  return m_AreaType;
}
void ReportingArea::setAreaType(
    oai::model::lmf::ReportingAreaType const& value) {
  m_AreaType = value;
}
oai::model::common::Tai ReportingArea::getTai() const {
  return m_Tai;
}
void ReportingArea::setTai(oai::model::common::Tai const& value) {
  m_Tai      = value;
  m_TaiIsSet = true;
}
bool ReportingArea::taiIsSet() const {
  return m_TaiIsSet;
}
void ReportingArea::unsetTai() {
  m_TaiIsSet = false;
}
oai::model::common::Ecgi ReportingArea::getEcgi() const {
  return m_Ecgi;
}
void ReportingArea::setEcgi(oai::model::common::Ecgi const& value) {
  m_Ecgi      = value;
  m_EcgiIsSet = true;
}
bool ReportingArea::ecgiIsSet() const {
  return m_EcgiIsSet;
}
void ReportingArea::unsetEcgi() {
  m_EcgiIsSet = false;
}
oai::model::common::Ncgi ReportingArea::getNcgi() const {
  return m_Ncgi;
}
void ReportingArea::setNcgi(oai::model::common::Ncgi const& value) {
  m_Ncgi      = value;
  m_NcgiIsSet = true;
}
bool ReportingArea::ncgiIsSet() const {
  return m_NcgiIsSet;
}
void ReportingArea::unsetNcgi() {
  m_NcgiIsSet = false;
}

}  // namespace oai::model::lmf
