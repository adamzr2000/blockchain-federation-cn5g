/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UELocationInfo.h
 *
 *
 */

#ifndef UELocationInfo_H_
#define UELocationInfo_H_

#include "GeographicArea.h"
#include "VelocityEstimate.h"
#include <nlohmann/json.hpp>

namespace oai::model::lmf {

/// <summary>
///
/// </summary>
class UELocationInfo {
 public:
  UELocationInfo();
  virtual ~UELocationInfo() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const UELocationInfo& rhs) const;
  bool operator!=(const UELocationInfo& rhs) const;

  /////////////////////////////////////////////
  /// UELocationInfo members

  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::GeographicArea getLocationEstimate() const;
  void setLocationEstimate(oai::model::lmf::GeographicArea const& value);
  bool locationEstimateIsSet() const;
  void unsetLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  int32_t getAgeOfLocationEstimate() const;
  void setAgeOfLocationEstimate(int32_t const value);
  bool ageOfLocationEstimateIsSet() const;
  void unsetAgeOfLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::VelocityEstimate getVelocityEstimate() const;
  void setVelocityEstimate(oai::model::lmf::VelocityEstimate const& value);
  bool velocityEstimateIsSet() const;
  void unsetVelocityEstimate();
  /// <summary>
  ///
  /// </summary>
  int32_t getAgeOfVelocityEstimate() const;
  void setAgeOfVelocityEstimate(int32_t const value);
  bool ageOfVelocityEstimateIsSet() const;
  void unsetAgeOfVelocityEstimate();

  friend void to_json(nlohmann::json& j, const UELocationInfo& o);
  friend void from_json(const nlohmann::json& j, UELocationInfo& o);

 protected:
  oai::model::lmf::GeographicArea m_LocationEstimate;
  bool m_LocationEstimateIsSet;
  int32_t m_AgeOfLocationEstimate;
  bool m_AgeOfLocationEstimateIsSet;
  oai::model::lmf::VelocityEstimate m_VelocityEstimate;
  bool m_VelocityEstimateIsSet;
  int32_t m_AgeOfVelocityEstimate;
  bool m_AgeOfVelocityEstimateIsSet;
};

}  // namespace oai::model::lmf

#endif /* UELocationInfo_H_ */
