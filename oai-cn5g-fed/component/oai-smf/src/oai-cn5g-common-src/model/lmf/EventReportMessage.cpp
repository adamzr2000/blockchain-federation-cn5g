/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventReportMessage.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

EventReportMessage::EventReportMessage() {}

void EventReportMessage::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool EventReportMessage::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool EventReportMessage::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "EventReportMessage" : pathPrefix;

  return success;
}

bool EventReportMessage::operator==(const EventReportMessage& rhs) const {
  return

      (getEventClass() == rhs.getEventClass()) &&

      (getEventContent() == rhs.getEventContent())

          ;
}

bool EventReportMessage::operator!=(const EventReportMessage& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const EventReportMessage& o) {
  j                 = nlohmann::json();
  j["eventClass"]   = o.m_EventClass;
  j["eventContent"] = o.m_EventContent;
}

void from_json(const nlohmann::json& j, EventReportMessage& o) {
  j.at("eventClass").get_to(o.m_EventClass);
  j.at("eventContent").get_to(o.m_EventContent);
}

oai::model::lmf::EventClass EventReportMessage::getEventClass() const {
  return m_EventClass;
}
void EventReportMessage::setEventClass(
    oai::model::lmf::EventClass const& value) {
  m_EventClass = value;
}
oai::model::common::RefToBinaryData EventReportMessage::getEventContent()
    const {
  return m_EventContent;
}
void EventReportMessage::setEventContent(
    oai::model::common::RefToBinaryData const& value) {
  m_EventContent = value;
}

}  // namespace oai::model::lmf
