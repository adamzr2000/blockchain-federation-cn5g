/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ReportingArea.h
 *
 *
 */

#ifndef ReportingArea_H_
#define ReportingArea_H_

#include "Ecgi.h"
#include "Ncgi.h"
#include "Tai.h"
#include "ReportingAreaType.h"
#include <nlohmann/json.hpp>

namespace oai::model::lmf {

/// <summary>
///
/// </summary>
class ReportingArea {
 public:
  ReportingArea();
  virtual ~ReportingArea() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ReportingArea& rhs) const;
  bool operator!=(const ReportingArea& rhs) const;

  /////////////////////////////////////////////
  /// ReportingArea members

  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::ReportingAreaType getAreaType() const;
  void setAreaType(oai::model::lmf::ReportingAreaType const& value);
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Tai getTai() const;
  void setTai(oai::model::common::Tai const& value);
  bool taiIsSet() const;
  void unsetTai();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ecgi getEcgi() const;
  void setEcgi(oai::model::common::Ecgi const& value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ncgi getNcgi() const;
  void setNcgi(oai::model::common::Ncgi const& value);
  bool ncgiIsSet() const;
  void unsetNcgi();

  friend void to_json(nlohmann::json& j, const ReportingArea& o);
  friend void from_json(const nlohmann::json& j, ReportingArea& o);

 protected:
  oai::model::lmf::ReportingAreaType m_AreaType;

  oai::model::common::Tai m_Tai;
  bool m_TaiIsSet;
  oai::model::common::Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  oai::model::common::Ncgi m_Ncgi;
  bool m_NcgiIsSet;
};

}  // namespace oai::model::lmf

#endif /* ReportingArea_H_ */
