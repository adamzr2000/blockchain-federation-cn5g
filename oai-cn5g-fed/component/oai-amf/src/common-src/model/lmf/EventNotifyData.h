/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventNotifyData.h
 *
 *
 */

#ifndef EventNotifyData_H_
#define EventNotifyData_H_

#include "GnssPositioningMethodAndUsage.h"
#include "CivicAddress.h"
#include "GeographicArea.h"
#include "VelocityEstimate.h"
#include "PositioningMethodAndUsage.h"
#include <string>
#include "TerminationCause.h"
#include <vector>
#include "ReportedEventType.h"
#include <nlohmann/json.hpp>

namespace oai::model::lmf {

/// <summary>
///
/// </summary>
class EventNotifyData {
 public:
  EventNotifyData();
  virtual ~EventNotifyData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const EventNotifyData& rhs) const;
  bool operator!=(const EventNotifyData& rhs) const;

  /////////////////////////////////////////////
  /// EventNotifyData members

  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::ReportedEventType getReportedEventType() const;
  void setReportedEventType(oai::model::lmf::ReportedEventType const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const& value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  ///
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const& value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  std::string getHgmlcCallBackURI() const;
  void setHgmlcCallBackURI(std::string const& value);
  bool hgmlcCallBackURIIsSet() const;
  void unsetHgmlcCallBackURI();
  /// <summary>
  ///
  /// </summary>
  std::string getLdrReference() const;
  void setLdrReference(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::GeographicArea getLocationEstimate() const;
  void setLocationEstimate(oai::model::lmf::GeographicArea const& value);
  bool locationEstimateIsSet() const;
  void unsetLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  int32_t getAgeOfLocationEstimate() const;
  void setAgeOfLocationEstimate(int32_t const value);
  bool ageOfLocationEstimateIsSet() const;
  void unsetAgeOfLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::CivicAddress getCivicAddress() const;
  void setCivicAddress(oai::model::lmf::CivicAddress const& value);
  bool civicAddressIsSet() const;
  void unsetCivicAddress();
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::lmf::PositioningMethodAndUsage>
  getPositioningDataList() const;
  void setPositioningDataList(
      std::vector<oai::model::lmf::PositioningMethodAndUsage> const& value);
  bool positioningDataListIsSet() const;
  void unsetPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::lmf::GnssPositioningMethodAndUsage>
  getGnssPositioningDataList() const;
  void setGnssPositioningDataList(
      std::vector<oai::model::lmf::GnssPositioningMethodAndUsage> const& value);
  bool gnssPositioningDataListIsSet() const;
  void unsetGnssPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  std::string getServingLMFidentification() const;
  void setServingLMFidentification(std::string const& value);
  bool servingLMFidentificationIsSet() const;
  void unsetServingLMFidentification();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::TerminationCause getTerminationCause() const;
  void setTerminationCause(oai::model::lmf::TerminationCause const& value);
  bool terminationCauseIsSet() const;
  void unsetTerminationCause();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::VelocityEstimate getVelocityEstimate() const;
  void setVelocityEstimate(oai::model::lmf::VelocityEstimate const& value);
  bool velocityEstimateIsSet() const;
  void unsetVelocityEstimate();
  /// <summary>
  ///
  /// </summary>
  double getAltitude() const;
  void setAltitude(double const value);
  bool altitudeIsSet() const;
  void unsetAltitude();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json& j, const EventNotifyData& o);
  friend void from_json(const nlohmann::json& j, EventNotifyData& o);

 protected:
  oai::model::lmf::ReportedEventType m_ReportedEventType;

  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_HgmlcCallBackURI;
  bool m_HgmlcCallBackURIIsSet;
  std::string m_LdrReference;

  oai::model::lmf::GeographicArea m_LocationEstimate;
  bool m_LocationEstimateIsSet;
  int32_t m_AgeOfLocationEstimate;
  bool m_AgeOfLocationEstimateIsSet;
  oai::model::lmf::CivicAddress m_CivicAddress;
  bool m_CivicAddressIsSet;
  std::vector<oai::model::lmf::PositioningMethodAndUsage> m_PositioningDataList;
  bool m_PositioningDataListIsSet;
  std::vector<oai::model::lmf::GnssPositioningMethodAndUsage>
      m_GnssPositioningDataList;
  bool m_GnssPositioningDataListIsSet;
  std::string m_ServingLMFidentification;
  bool m_ServingLMFidentificationIsSet;
  oai::model::lmf::TerminationCause m_TerminationCause;
  bool m_TerminationCauseIsSet;
  oai::model::lmf::VelocityEstimate m_VelocityEstimate;
  bool m_VelocityEstimateIsSet;
  double m_Altitude;
  bool m_AltitudeIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

}  // namespace oai::model::lmf

#endif /* EventNotifyData_H_ */
