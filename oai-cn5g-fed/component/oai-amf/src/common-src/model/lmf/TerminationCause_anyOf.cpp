/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TerminationCause_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace oai::model::lmf {

TerminationCause_anyOf::TerminationCause_anyOf() {}

void TerminationCause_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool TerminationCause_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool TerminationCause_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "TerminationCause_anyOf" : pathPrefix;

  if (m_value == TerminationCause_anyOf::eTerminationCause_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool TerminationCause_anyOf::operator==(
    const TerminationCause_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool TerminationCause_anyOf::operator!=(
    const TerminationCause_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TerminationCause_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case TerminationCause_anyOf::eTerminationCause_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case TerminationCause_anyOf::eTerminationCause_anyOf::TERMINATION_BY_UE:
      j = "TERMINATION_BY_UE";
      break;
    case TerminationCause_anyOf::eTerminationCause_anyOf::
        TERMINATION_BY_NETWORK:
      j = "TERMINATION_BY_NETWORK";
      break;
    case TerminationCause_anyOf::eTerminationCause_anyOf::NORMAL_TERMINATION:
      j = "NORMAL_TERMINATION";
      break;
  }
}

void from_json(const nlohmann::json& j, TerminationCause_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "TERMINATION_BY_UE") {
    o.setValue(
        TerminationCause_anyOf::eTerminationCause_anyOf::TERMINATION_BY_UE);
  } else if (s == "TERMINATION_BY_NETWORK") {
    o.setValue(TerminationCause_anyOf::eTerminationCause_anyOf::
                   TERMINATION_BY_NETWORK);
  } else if (s == "NORMAL_TERMINATION") {
    o.setValue(
        TerminationCause_anyOf::eTerminationCause_anyOf::NORMAL_TERMINATION);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " TerminationCause_anyOf::eTerminationCause_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

TerminationCause_anyOf::eTerminationCause_anyOf
TerminationCause_anyOf::getValue() const {
  return m_value;
}
void TerminationCause_anyOf::setValue(
    TerminationCause_anyOf::eTerminationCause_anyOf value) {
  m_value = value;
}

}  // namespace oai::model::lmf
