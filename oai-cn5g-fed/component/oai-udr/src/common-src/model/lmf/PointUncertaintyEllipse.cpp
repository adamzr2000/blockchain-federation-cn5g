/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PointUncertaintyEllipse.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

PointUncertaintyEllipse::PointUncertaintyEllipse() {
  m_Confidence = 0;
}

void PointUncertaintyEllipse::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool PointUncertaintyEllipse::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PointUncertaintyEllipse::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PointUncertaintyEllipse" : pathPrefix;

  /* Confidence */ {
    const int32_t& value               = m_Confidence;
    const std::string currentValuePath = _pathPrefix + ".confidence";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  return success;
}

bool PointUncertaintyEllipse::operator==(
    const PointUncertaintyEllipse& rhs) const {
  return

      (getShape() == rhs.getShape()) &&

      (getPoint() == rhs.getPoint()) &&

      (getUncertaintyEllipse() == rhs.getUncertaintyEllipse()) &&

      (getConfidence() == rhs.getConfidence())

          ;
}

bool PointUncertaintyEllipse::operator!=(
    const PointUncertaintyEllipse& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PointUncertaintyEllipse& o) {
  j                       = nlohmann::json();
  j["shape"]              = o.m_Shape;
  j["point"]              = o.m_Point;
  j["uncertaintyEllipse"] = o.m_UncertaintyEllipse;
  j["confidence"]         = o.m_Confidence;
}

void from_json(const nlohmann::json& j, PointUncertaintyEllipse& o) {
  j.at("shape").get_to(o.m_Shape);
  j.at("point").get_to(o.m_Point);
  j.at("uncertaintyEllipse").get_to(o.m_UncertaintyEllipse);
  j.at("confidence").get_to(o.m_Confidence);
}

oai::model::lmf::SupportedGADShapes PointUncertaintyEllipse::getShape() const {
  return m_Shape;
}
void PointUncertaintyEllipse::setShape(
    oai::model::lmf::SupportedGADShapes const& value) {
  m_Shape = value;
}
oai::model::lmf::GeographicalCoordinates PointUncertaintyEllipse::getPoint()
    const {
  return m_Point;
}
void PointUncertaintyEllipse::setPoint(
    oai::model::lmf::GeographicalCoordinates const& value) {
  m_Point = value;
}
oai::model::lmf::UncertaintyEllipse
PointUncertaintyEllipse::getUncertaintyEllipse() const {
  return m_UncertaintyEllipse;
}
void PointUncertaintyEllipse::setUncertaintyEllipse(
    oai::model::lmf::UncertaintyEllipse const& value) {
  m_UncertaintyEllipse = value;
}
int32_t PointUncertaintyEllipse::getConfidence() const {
  return m_Confidence;
}
void PointUncertaintyEllipse::setConfidence(int32_t const value) {
  m_Confidence = value;
}

}  // namespace oai::model::lmf
