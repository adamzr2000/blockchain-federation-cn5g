/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LocationData.h
 *
 *
 */

#ifndef LocationData_H_
#define LocationData_H_

#include "GnssPositioningMethodAndUsage.h"
#include "AccuracyFulfilmentIndicator.h"
#include "Ecgi.h"
#include "Ncgi.h"
#include "CivicAddress.h"
#include "GeographicArea.h"
#include "VelocityEstimate.h"
#include "PositioningMethodAndUsage.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::model::lmf {

/// <summary>
///
/// </summary>
class LocationData {
 public:
  LocationData();
  virtual ~LocationData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const LocationData& rhs) const;
  bool operator!=(const LocationData& rhs) const;

  /////////////////////////////////////////////
  /// LocationData members

  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::GeographicArea getLocationEstimate() const;
  void setLocationEstimate(oai::model::lmf::GeographicArea const& value);
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::AccuracyFulfilmentIndicator getAccuracyFulfilmentIndicator()
      const;
  void setAccuracyFulfilmentIndicator(
      oai::model::lmf::AccuracyFulfilmentIndicator const& value);
  bool accuracyFulfilmentIndicatorIsSet() const;
  void unsetAccuracyFulfilmentIndicator();
  /// <summary>
  ///
  /// </summary>
  int32_t getAgeOfLocationEstimate() const;
  void setAgeOfLocationEstimate(int32_t const value);
  bool ageOfLocationEstimateIsSet() const;
  void unsetAgeOfLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::VelocityEstimate getVelocityEstimate() const;
  void setVelocityEstimate(oai::model::lmf::VelocityEstimate const& value);
  bool velocityEstimateIsSet() const;
  void unsetVelocityEstimate();
  /// <summary>
  ///
  /// </summary>
  oai::model::lmf::CivicAddress getCivicAddress() const;
  void setCivicAddress(oai::model::lmf::CivicAddress const& value);
  bool civicAddressIsSet() const;
  void unsetCivicAddress();
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::lmf::PositioningMethodAndUsage>
  getPositioningDataList() const;
  void setPositioningDataList(
      std::vector<oai::model::lmf::PositioningMethodAndUsage> const& value);
  bool positioningDataListIsSet() const;
  void unsetPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::lmf::GnssPositioningMethodAndUsage>
  getGnssPositioningDataList() const;
  void setGnssPositioningDataList(
      std::vector<oai::model::lmf::GnssPositioningMethodAndUsage> const& value);
  bool gnssPositioningDataListIsSet() const;
  void unsetGnssPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ecgi getEcgi() const;
  void setEcgi(oai::model::common::Ecgi const& value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ncgi getNcgi() const;
  void setNcgi(oai::model::common::Ncgi const& value);
  bool ncgiIsSet() const;
  void unsetNcgi();
  /// <summary>
  ///
  /// </summary>
  double getAltitude() const;
  void setAltitude(double const value);
  bool altitudeIsSet() const;
  void unsetAltitude();
  /// <summary>
  ///
  /// </summary>
  int32_t getBarometricPressure() const;
  void setBarometricPressure(int32_t const value);
  bool barometricPressureIsSet() const;
  void unsetBarometricPressure();
  /// <summary>
  ///
  /// </summary>
  std::string getServingLMFIdentification() const;
  void setServingLMFIdentification(std::string const& value);
  bool servingLMFIdentificationIsSet() const;
  void unsetServingLMFIdentification();

  friend void to_json(nlohmann::json& j, const LocationData& o);
  friend void from_json(const nlohmann::json& j, LocationData& o);

 protected:
  oai::model::lmf::GeographicArea m_LocationEstimate;

  oai::model::lmf::AccuracyFulfilmentIndicator m_AccuracyFulfilmentIndicator;
  bool m_AccuracyFulfilmentIndicatorIsSet;
  int32_t m_AgeOfLocationEstimate;
  bool m_AgeOfLocationEstimateIsSet;
  oai::model::lmf::VelocityEstimate m_VelocityEstimate;
  bool m_VelocityEstimateIsSet;
  oai::model::lmf::CivicAddress m_CivicAddress;
  bool m_CivicAddressIsSet;
  std::vector<oai::model::lmf::PositioningMethodAndUsage> m_PositioningDataList;
  bool m_PositioningDataListIsSet;
  std::vector<oai::model::lmf::GnssPositioningMethodAndUsage>
      m_GnssPositioningDataList;
  bool m_GnssPositioningDataListIsSet;
  oai::model::common::Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  oai::model::common::Ncgi m_Ncgi;
  bool m_NcgiIsSet;
  double m_Altitude;
  bool m_AltitudeIsSet;
  int32_t m_BarometricPressure;
  bool m_BarometricPressureIsSet;
  std::string m_ServingLMFIdentification;
  bool m_ServingLMFIdentificationIsSet;
};

}  // namespace oai::model::lmf

#endif /* LocationData_H_ */
