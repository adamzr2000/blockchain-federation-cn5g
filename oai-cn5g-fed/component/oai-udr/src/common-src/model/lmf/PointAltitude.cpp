/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PointAltitude.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

PointAltitude::PointAltitude() {
  m_Altitude = 0.0;
}

void PointAltitude::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool PointAltitude::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PointAltitude::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PointAltitude" : pathPrefix;

  /* Altitude */ {
    const double& value                = m_Altitude;
    const std::string currentValuePath = _pathPrefix + ".altitude";

    if (value < -32767) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to -32767;";
    }
    if (value > 32767) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 32767;";
    }
  }

  return success;
}

bool PointAltitude::operator==(const PointAltitude& rhs) const {
  return

      (getShape() == rhs.getShape()) &&

      (getPoint() == rhs.getPoint()) &&

      (getAltitude() == rhs.getAltitude())

          ;
}

bool PointAltitude::operator!=(const PointAltitude& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PointAltitude& o) {
  j             = nlohmann::json();
  j["shape"]    = o.m_Shape;
  j["point"]    = o.m_Point;
  j["altitude"] = o.m_Altitude;
}

void from_json(const nlohmann::json& j, PointAltitude& o) {
  j.at("shape").get_to(o.m_Shape);
  j.at("point").get_to(o.m_Point);
  j.at("altitude").get_to(o.m_Altitude);
}

oai::model::lmf::SupportedGADShapes PointAltitude::getShape() const {
  return m_Shape;
}
void PointAltitude::setShape(oai::model::lmf::SupportedGADShapes const& value) {
  m_Shape = value;
}
oai::model::lmf::GeographicalCoordinates PointAltitude::getPoint() const {
  return m_Point;
}
void PointAltitude::setPoint(
    oai::model::lmf::GeographicalCoordinates const& value) {
  m_Point = value;
}
double PointAltitude::getAltitude() const {
  return m_Altitude;
}
void PointAltitude::setAltitude(double const value) {
  m_Altitude = value;
}

}  // namespace oai::model::lmf
