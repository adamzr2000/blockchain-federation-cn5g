/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeLcsCapability.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

UeLcsCapability::UeLcsCapability() {
  m_LppSupport            = true;
  m_LppSupportIsSet       = false;
  m_CiotOptimisation      = false;
  m_CiotOptimisationIsSet = false;
}

void UeLcsCapability::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool UeLcsCapability::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeLcsCapability::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeLcsCapability" : pathPrefix;

  return success;
}

bool UeLcsCapability::operator==(const UeLcsCapability& rhs) const {
  return

      ((!lppSupportIsSet() && !rhs.lppSupportIsSet()) ||
       (lppSupportIsSet() && rhs.lppSupportIsSet() &&
        isLppSupport() == rhs.isLppSupport())) &&

      ((!ciotOptimisationIsSet() && !rhs.ciotOptimisationIsSet()) ||
       (ciotOptimisationIsSet() && rhs.ciotOptimisationIsSet() &&
        isCiotOptimisation() == rhs.isCiotOptimisation()))

          ;
}

bool UeLcsCapability::operator!=(const UeLcsCapability& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeLcsCapability& o) {
  j = nlohmann::json();
  if (o.lppSupportIsSet()) j["lppSupport"] = o.m_LppSupport;
  if (o.ciotOptimisationIsSet()) j["ciotOptimisation"] = o.m_CiotOptimisation;
}

void from_json(const nlohmann::json& j, UeLcsCapability& o) {
  if (j.find("lppSupport") != j.end()) {
    j.at("lppSupport").get_to(o.m_LppSupport);
    o.m_LppSupportIsSet = true;
  }
  if (j.find("ciotOptimisation") != j.end()) {
    j.at("ciotOptimisation").get_to(o.m_CiotOptimisation);
    o.m_CiotOptimisationIsSet = true;
  }
}

bool UeLcsCapability::isLppSupport() const {
  return m_LppSupport;
}
void UeLcsCapability::setLppSupport(bool const value) {
  m_LppSupport      = value;
  m_LppSupportIsSet = true;
}
bool UeLcsCapability::lppSupportIsSet() const {
  return m_LppSupportIsSet;
}
void UeLcsCapability::unsetLppSupport() {
  m_LppSupportIsSet = false;
}
bool UeLcsCapability::isCiotOptimisation() const {
  return m_CiotOptimisation;
}
void UeLcsCapability::setCiotOptimisation(bool const value) {
  m_CiotOptimisation      = value;
  m_CiotOptimisationIsSet = true;
}
bool UeLcsCapability::ciotOptimisationIsSet() const {
  return m_CiotOptimisationIsSet;
}
void UeLcsCapability::unsetCiotOptimisation() {
  m_CiotOptimisationIsSet = false;
}

}  // namespace oai::model::lmf
