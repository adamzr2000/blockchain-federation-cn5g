/**
 * LMF Location
 * LMF Location Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GnssPositioningMethodAndUsage.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::lmf {

GnssPositioningMethodAndUsage::GnssPositioningMethodAndUsage() {}

void GnssPositioningMethodAndUsage::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool GnssPositioningMethodAndUsage::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool GnssPositioningMethodAndUsage::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "GnssPositioningMethodAndUsage" : pathPrefix;

  return success;
}

bool GnssPositioningMethodAndUsage::operator==(
    const GnssPositioningMethodAndUsage& rhs) const {
  return

      (getMode() == rhs.getMode()) &&

      (getGnss() == rhs.getGnss()) &&

      (getUsage() == rhs.getUsage())

          ;
}

bool GnssPositioningMethodAndUsage::operator!=(
    const GnssPositioningMethodAndUsage& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GnssPositioningMethodAndUsage& o) {
  j          = nlohmann::json();
  j["mode"]  = o.m_Mode;
  j["gnss"]  = o.m_Gnss;
  j["usage"] = o.m_Usage;
}

void from_json(const nlohmann::json& j, GnssPositioningMethodAndUsage& o) {
  j.at("mode").get_to(o.m_Mode);
  j.at("gnss").get_to(o.m_Gnss);
  j.at("usage").get_to(o.m_Usage);
}

oai::model::lmf::PositioningMode GnssPositioningMethodAndUsage::getMode()
    const {
  return m_Mode;
}
void GnssPositioningMethodAndUsage::setMode(
    oai::model::lmf::PositioningMode const& value) {
  m_Mode = value;
}
oai::model::lmf::GnssId GnssPositioningMethodAndUsage::getGnss() const {
  return m_Gnss;
}
void GnssPositioningMethodAndUsage::setGnss(
    oai::model::lmf::GnssId const& value) {
  m_Gnss = value;
}
oai::model::lmf::Usage GnssPositioningMethodAndUsage::getUsage() const {
  return m_Usage;
}
void GnssPositioningMethodAndUsage::setUsage(
    oai::model::lmf::Usage const& value) {
  m_Usage = value;
}

}  // namespace oai::model::lmf
